std::cout << "remove_node(): Case 9: 2CYB.\n";
			//std::cout << "remove_node(): Black Deficient.\n";

			// Take a backup of the node-to-be-deleted first.
			struct node *foo = nullptr;
			struct node *temppar = nullptr;

			foo = temp;

			////////////////////////////////////////////////////////////////////////
			// Decision on which replacement strategy to use out of the 2 available.
			////////////////////////////////////////////////////////////////////////
			// Step 1 of 3: Extract the smallest node from gt subtree.
			node *small = temp->gt;
			while (small->lt != nullptr) // Iteration
				small = small->lt;

			// Step 2 of 3: Extract the biggest node from lt subtree.
			node *big = temp->lt;
			while (big->gt != nullptr) // Iteration
				big = big->gt;


			// Step 3 of 3: Now the decision.
			if (big->level > small->level)
			{
				// Case: Biggest from lt subtree.
				temp = temp->lt;
				while (temp->gt != nullptr) // Iteration
					temp = temp->gt;
			}
			else
			{
				// Case: Smallest from gt subtree.
				temp = temp->gt;
				while (temp->lt != nullptr) // Iteration
					temp = temp->lt;
			}

			std::cout << "remove_node(): Case 9: 2CYB: Node to be replaced = " << foo->id << "\n";
			std::cout << "remove_node(): Case 9: 2CYB: Replacement candidate node = " << temp->id << "\n";
			std::cout << "remove_node(): Case 9: 2CYB: Replacement candidate node color = " << temp->color << "\n";

			// If replacement node is red color, then do the regular replacement wherein the replaced node takes the color of the to-be-replaced node's color.
			if (temp->color == true)
			{
				// Now, replace the to-be-deleted node.
				// First, make sure the to-be-replaced node's parent is no longer pointing to it.
				temppar = temp->parent;

				if (temppar->lt == temp)
					temppar->lt = nullptr;
				else if (temppar->gt == temp)
					temppar->gt = nullptr;

				// Second, replace foo. Note that other data remains the same, like the color of the node.
				foo->id = temp->id;
				temp->lt = foo->lt;
				temp->gt = foo->gt;
				temp->parent = foo->parent;

				//display();
				//std::cout << "remove_node(): Case 9: 2CYB: Now removing temp = " << temp->id << "\n";
				//remove_node(temp->id);

				// Finally, delete foo.
				temp->parent = nullptr;
				temp->lt = nullptr;
				temp->gt = nullptr;
				delete(temp);
				temp = nullptr;
			}
			else
			{
				// Call remove_node() again with the replacement candidate node.
				remove_node(temp->id);
			}
			return;
